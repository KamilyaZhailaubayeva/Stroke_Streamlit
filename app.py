import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import MinMaxScaler
import pickle
import plotly.express as px


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Stroke Prediction App",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
uploaded_file = None

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö session state
if 'df_input' not in st.session_state:
    st.session_state['df_input'] = pd.DataFrame()

if 'df_predicted' not in st.session_state:
    st.session_state['df_predicted'] = pd.DataFrame()

if 'tab_selected' not in st.session_state:
    st.session_state['tab_selected'] = None

def reset_session_state():
    st.session_state['df_input'] = pd.DataFrame()
    st.session_state['df_predicted'] = pd.DataFrame()

# ML section start
numerical = ['age', 'avg_glucose_level', 'bmi']
categorical = ['gender',
 'hypertension',
 'heart_disease',
 'ever_married',
 'work_type',
 'residence_type',
 'smoking_status']

# logistic regression model
model_file_path = 'models/lr_model_stroke_prediction.sav'
model = pickle.load(open(model_file_path, 'rb'))

# encoding model DictVectorizer
encoding_model_file_path = 'models/encoding_model.sav'
encoding_model = pickle.load(open(encoding_model_file_path, 'rb'))

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
@st.cache_data
def predict_stroke(df_input, treshold):

    scaler = MinMaxScaler()

    df_original = df_input.copy()
    df_input[numerical] = scaler.fit_transform(df_input[numerical])
    
    dicts_df = df_input[categorical + numerical].to_dict(orient='records')
    X = encoding_model.transform(dicts_df)
    y_pred = model.predict_proba(X)[:, 1]
    stroke_descision = (y_pred >= treshold).astype(int)
    df_original['stroke_predicted'] = stroke_descision
    df_original['stroke_predicted_probability'] = y_pred

    return df_original

@st.cache_data
def convert_df(df):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –≤ csv
    return df.to_csv(index=False).encode('utf-8')

# Sidebar section start
# –°–∞–π–¥–±–∞—Ä –±–ª–æ–∫
with st.sidebar:
    st.title('üóÇ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')
    
    tab1, tab2 = st.tabs(['üìÅ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞', 'üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'])
    with tab1:
        # –í–∫–ª–∞–¥–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–∞, –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä–æ–≥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–∫–ª–∞–¥–∫–∞ 1)
        uploaded_file = st.file_uploader("–í—ã–±—Ä–∞—Ç—å CSV —Ñ–∞–π–ª", type=['csv', 'xlsx'], on_change=reset_session_state)
        if uploaded_file is not None:
            treshold = st.slider('–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞', 0.0, 1.0, 0.5, 0.01, key='slider1')
            prediction_button = st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', type='primary', use_container_width=True, key='button1')
            st.session_state['df_input'] = pd.read_csv(uploaded_file)
            if prediction_button:
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                st.session_state['df_predicted'] = predict_stroke(st.session_state['df_input'], treshold)
                st.session_state['tab_selected'] = 'tab1'

    with tab2:
        # –í–∫–ª–∞–¥–∫–∞ —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é, –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä–æ–≥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–∫–ª–∞–¥–∫–∞ 2)
        id = st.text_input('Patient ID', placeholder='0000', help='–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞')
        gender = st.selectbox( '–ü–æ–ª', ('–ñ–µ–Ω—â–∏–Ω–∞', '–ú—É–∂—á–∏–Ω–∞'))
        age = st.number_input('–í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞', min_value=0, max_value=150, value=0)
        hypertension = st.selectbox('–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è', ('–î–∞', '–ù–µ—Ç'))
        heart_disease = st.selectbox('–ë–æ–ª–µ–∑–Ω–∏ —Å–µ—Ä–¥—Ü–∞', ('–î–∞', '–ù–µ—Ç'))
        ever_married = st.selectbox('–ó–∞–º—É–∂–µ–º/–∂–µ–Ω–∞—Ç—ã –∏–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª–∏', ('–î–∞', '–ù–µ—Ç'))
        work_type = st.selectbox('–¢–∏–ø —Ä–∞–±–æ—Ç—ã', ('private', 'self_employed', 'govt_job', 'children'))
        residence_type = st.selectbox('–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è', ('–í –≥–æ—Ä–æ–¥–µ', '–í –¥–µ—Ä–µ–≤–Ω–µ'))
        avg_glucose_level = st.number_input('–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã', min_value=0, max_value=300, value=0)
        bmi = st.number_input('–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞', min_value=0, max_value=100, value=0)
        smoking_status = st.selectbox('–°—Ç–∞—Ç—É—Å –∫—É—Ä–µ–Ω–∏—è', ('formerly_smoked', 'never_smoked', 'smokes', 'unknown'))
             
        
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID –ø–∞—Ü–∏–µ–Ω—Ç–∞, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–∞–π–¥–µ—Ä —Å –ø–æ—Ä–æ–≥–æ–º –∏ –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if id != '':
            treshold = st.slider('–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Å—É–ª—å—Ç–∞', 0.0, 1.0, 0.5, 0.01, key='slider2')
            prediction_button_tab2 = st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', type='primary', use_container_width=True, key='button2')
            
            if prediction_button_tab2:
                st.session_state['tab_selected'] = 'tab2'
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ session state –≤ –≤–∏–¥–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
                st.session_state['df_input'] = pd.DataFrame({
                    'id': id,
                    'gender': 'female' if gender == '–ñ–µ–Ω—â–∏–Ω–∞' else 'male',
                    'age': int(age),
                    'hypertension': 1 if hypertension == '–î–∞' else 0,
                    'heart_disease': 1 if heart_disease == '–î–∞' else 0,
                    'ever_married': 'yes' if ever_married == '–î–∞' else 'no',       
                    'work_type': work_type,
                    'residence_type': 'urban' if residence_type == '–í –≥–æ—Ä–æ–¥–µ' else 'rural',
                    'avg_glucose_level': float(avg_glucose_level),
                    'bmi': float(bmi),
                    'smoking_status': smoking_status
                }, index=[0])
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                st.session_state['df_predicted'] = predict_stroke(st.session_state['df_input'], treshold)

                

# Sidebar section end

# Main section start
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
st.image('https://www.verywellhealth.com/thmb/uVW7Rx19dvUe9oesk8BD6eCHWcY=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/GettyImages-670886585-25e3cf6a70884fd2b427810085301f8f.jpg', width=400)
st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—É–ª—å—Ç–∞ —É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤')

with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"):
    st.write("""
    –í –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—É–ª—å—Ç–∞ —É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.
    –î–ª—è —ç—Ç–æ–≥–æ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
    –î–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –±—ã–ª –∏–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª –∏–Ω—Å—É–ª—å—Ç.
    –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Å—É–ª—å—Ç —É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.
    """)

# –í—ã–≤–æ–¥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–º/–≤—Ä–∞—á–æ–º)
if len(st.session_state['df_input']) > 0:
    # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—â–µ–º –≤–∏–¥–µ
    if len(st.session_state['df_predicted']) == 0:
        st.subheader('–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞')
        st.write(st.session_state['df_input'])
    else:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ expander
        with st.expander("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
            st.write(st.session_state['df_input'])
    # –ü—Ä–∏–º–µ—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    # st.line_chart(st.session_state['df_input'][['tenure', 'monthlycharges']])
    # st.bar_chart(st.session_state['df_input'][['contract']])


# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–≤–∫–ª–∞–¥–∫–∞ 2)
if len(st.session_state['df_predicted']) > 0 and st.session_state['tab_selected'] == 'tab2':
    if st.session_state['df_predicted']['stroke_predicted'][0] == 0:
        st.image('https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdjM1cWdkYjMydWFkZmd0d3d5eGgwaHVnZ2k5bG95c2Fta29mejJrOSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/YkCcPWkMuUnRIwr6F1/giphy.gif', width=200)
        st.subheader(f'–£ –ø–∞—Ü–∏–µ–Ω—Ç–∞ :green[–Ω–µ –º–æ–∂–µ—Ç] —Å–ª—É—á–∏—Ç—Å—è –∏–Ω—Å—É–ª—å—Ç c –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {(1 - st.session_state["df_predicted"]["stroke_predicted_probability"][0]) * 100:.2f}%')
    else:
        st.image('https://gifdb.com/images/high/doctor-with-bad-news-4ohm43md81pax66f.gif', width=200)
        st.subheader(f'–£ –ø–∞—Ü–∏–µ—Ç–∞ :red[–º–æ–∂–µ—Ç] —Å–ª—É—á–∏—Ç—Å—è –∏–Ω—Å—É–ª—å—Ç c –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {(st.session_state["df_predicted"]["stroke_predicted_probability"][0]) * 100:.2f}%')


# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ (–≤–∫–ª–∞–¥–∫–∞ 1)
if len(st.session_state['df_predicted']) > 0 and st.session_state['tab_selected'] == 'tab1':
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è')
    st.write(st.session_state['df_predicted'])
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    res_all_csv = convert_df(st.session_state['df_predicted'])
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è",
        data=res_all_csv,
        file_name='df-stroke-predicted-all.csv',
        mime='text/csv',
    )

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Ç—Ç–æ–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
    fig = px.histogram(st.session_state['df_predicted'], x='stroke_predicted', color='stroke_predicted')
    st.plotly_chart(fig, use_container_width=True)

    # –ü–∞—Ü–∏–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –∏–Ω—Å—É–ª—å—Ç–∞
    risk_patients = st.session_state['df_predicted'][st.session_state['df_predicted']['stroke_predicted'] == 1]
    # –í—ã–≤–æ–¥–∏–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –∏–Ω—Å—É–ª—å—Ç–∞
    if len(risk_patients) > 0:
        st.subheader('–ü–∞—Ü–∏–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –∏–Ω—Å—É–ª—å—Ç–∞')
        st.write(risk_patients)
        # –°–∫–∞—á–∏–≤–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –∏–Ω—Å—É–ª—å—Ç–∞
        res_risky_csv = convert_df(risk_patients)
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –∏–Ω—Å—É–ª—å—Ç–∞",
            data=res_risky_csv,
            file_name='df-stroke-predicted-risk-patients.csv',
            mime='text/csv',
        )